#version 460 core

layout(local_size_x = 1) in;

const uint neurons = %N%;
const uint previousNeurons = %PN%;
const uint sampleSize = %SS%;

layout(std430, binding = 0) buffer Input1 {
    float dC_dZl[neurons][sampleSize];
};

layout(std430, binding = 1) buffer Input2 {
    float A_previous[previousNeurons][sampleSize];
};

layout(std430, binding = 2) buffer Input3 {
    float Wl[neurons][previousNeurons];
};

layout(std430, binding = 3) buffer Output {
    float dC_dZ_previous[previousNeurons][sampleSize];
};


void main() {

    uint sampleNumber = gl_GlobalInvocationID.x;
    uint previousNeuron = gl_GlobalInvocationID.y;

    float sum = 0.0;
    for (int neuron = 0; neuron < neurons; ++neuron) {
        sum += dC_dZl[neuron][sampleNumber] * Wl[neuron][previousNeuron];
    }
    dC_dZ_previous[previousNeuron][sampleNumber] = sum * A_previous[previousNeuron][sampleNumber] * ( 1 - A_previous[previousNeuron][sampleNumber]);
}
